#!/usr/bin/env bash

set -e

drop_caches()
{
  sync

  echo 3 | sudo tee /proc/sys/vm/drop_caches
}

prepare_log()
{
  local timestamp=$(date "+%F-%H-%M-%S")
  if [ -z ${1} ]; then
    log_fn="${timestamp}-${version}-${db}-${fill}-${klen}-${vlen}"
  else
    log_fn="${1}-${timestamp}-${version}-${db}-${fill}-${klen}-${vlen}"
  fi

  sout="${log_fn}-out.log"
  serr="${log_fn}-err.log"
  start="${log_fn}-start-smart.log"
  end="${log_fn}-end-smart.log"
  bio="${log_fn}-bio.log"
}

smart_start()
{
  sync
  sudo smartctl ${drive} -a > ${start}
  sudo smartctl ${drive} -l devstat >> ${start}
  sudo cat /proc/diskstats >> ${start}
}

smart_end()
{
  sync
  sudo smartctl ${drive} -a > ${end}
  sudo smartctl ${drive} -l devstat >> ${end}
  sudo cat /proc/diskstats >> ${end}
}

copy_log()
{
  if ls ${sys[1]}/log* 1> /dev/null 2>&1;
  then
    cat ${sys[1]}/log* >> "${log_fn}.log"
  fi

  if [[ -e ${sys[1]}/LOG ]]
  then
    cat ${sys[1]}/LOG >> "${log_fn}.log"
  fi
}

child_pid_of()
{
  local lpid=$1

  local pid=$(ps -ax -o ppid,pid --no-headers |
      sed -r 's/^ +//g;s/ +/ /g' |
      grep "^$lpid" | cut -f 2 -d " ");

  echo $pid
}

biosnoop_wrapped()
{
  { sudo ${BIOSNOOP_EXE} --disk ${drive} > ${bio}; } &
  local bio_pid=$(child_pid_of $!)
  trap "sudo kill -SIGINT ${bio_pid}" SIGINT

  # manually block to wait ebpf tools be ready
  sleep 5

  "$@"

  sudo kill -SIGINT ${bio_pid}
}

smartctl_wrapped()
{
  smart_start

  "$@"

  smart_end
  copy_log
}

set_drive()
{
  drive=$(df -P ${basedir} | awk 'END{print $1}')
  echo running on ${drive}
}

set_args()
{
  db=${1}
  fill=${2}
  klen=${3}
  vlen=${4}
  basedir=${5}

  if [ -z "${6}" ]; then
    mem_limit=""
  else
    mem_limit=${6}
  fi

  mkdir -p $basedir
  echo dir $basedir

  maxk=$((${fill} - 1))
  version="$(git rev-parse --short HEAD)"

  case $1 in
  remixdb)
    sys=('remixdb' "$basedir/remixdb")
    ;;
  discodb)
    sys=('discodb' "$basedir/discodb")
    ;;
  dummy)
    sys=('dummy' "$basedir/dummy")
    ;;
  full)
    sys=('full' "$basedir/full")
    ;;
  rdb-rw)
    sys=('rdb' "$basedir/rdb" '1')
    ;;
  rdb-ro)
    sys=('rdb' "$basedir/rdb" '0')
    ;;
  *)
    echo "sys: remixdb discodb rdb-rw rdb-ro"
    exit 0
    ;;
  esac
}

collect_log()
{
  if [ -z ${1} ]; then
    return
  fi

  if [ -z ${mem_limit} ]; then
    local folder_name=$1-${sys[0]}
  else
    local folder_name=$1-${sys[0]}-${mem_limit}
  fi

  mkdir $folder_name

  mv *.log *.csv $folder_name
}

parse_dbtest_csv()
{
  if [ -z ${mem_limit} ]; then
    return
  fi

  $(dirname "$0")/extract_dbtest.sh ${mem_limit} ${log_fn}.log ${drive} > ${log_fn}.csv
}

make_executables()
{
  case ${db} in
    rdb*)
      make -B ROCKSDB=y dbtest.out ycsbtest.out
      ;;
    *)
      make -B dbtest.out ycsbtest.out
      ;;
  esac
}

warmup()
{
  drop_caches

  prepare_log warmup

  local nscan=0
  smartctl_wrapped ./dbtest.out api ${sys[@]} \
    rgen uniform 0 ${maxk} pass  4 1 163840 400 1   3  n ${klen} ${nscan} \
    > >(tee ${sout}) 2> >(tee ${serr} >&2)
}

prep()
{
  set_args "$@"

  make_executables

  set_drive
}

iotrace_wrapped()
{
  smartctl_wrapped biosnoop_wrapped "$@"
}

BIOSNOOP_EXE=$(dirname "$0")/biosnoop.py

if [ ! -f "$BIOSNOOP_EXE" ]; then
  echo ${BIOSNOOP_EXE} does not exist. Follow the instruction to build it from source
  exit
fi

ulimit -n 400000
